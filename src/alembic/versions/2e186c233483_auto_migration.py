"""Auto migration

Revision ID: 2e186c233483
Revises: 
Create Date: 2025-07-21 11:54:51.187443

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2e186c233483'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('avaronn_porter_trip_schedule_uuid_fkey', 'avaronn_porter_trip', type_='foreignkey')
    op.drop_index('ix_tasks_schedules_mapping_id', table_name='tasks_schedules_mapping')
    op.drop_table('tasks_schedules_mapping')
    op.drop_index('ix_tasks_id', table_name='tasks')
    op.drop_index('ix_tasks_task_uuid', table_name='tasks')
    op.drop_table('tasks')
    # op.drop_table('kafka_messages')
    op.drop_index('ix_schedules_id', table_name='schedules')
    op.drop_index('ix_schedules_schedule_uuid', table_name='schedules')
    op.drop_table('schedules')
    op.drop_table('telematics')
    op.drop_column('avaronn_porter_trip', 'schedule_uuid')
    op.add_column('vehicle_main', sa.Column('vehicle_running_model', sa.String(), nullable=True))
    op.add_column('vehicle_main', sa.Column('attendance_time_on_vehicle', sa.TIMESTAMP(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('vehicle_main', 'attendance_time_on_vehicle')
    op.drop_column('vehicle_main', 'vehicle_running_model')
    # op.create_table('telematics',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('telematics_make', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='telematics_pkey')
    # )
    op.create_table('schedules',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('schedules_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('schedule_uuid', sa.VARCHAR(), server_default=sa.text("('SCH-'::text || nextval('schedule_seq'::regclass))"), autoincrement=False, nullable=False),
    sa.Column('mfo_driver_assignment_model', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('client_uuid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('route', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schedule_start_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('schedule_end_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['client_uuid'], ['client_main.client_uuid'], name='schedules_client_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['mfo_driver_assignment_model'], ['model_types.model_type_uuid'], name='schedules_mfo_driver_assignment_model_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='schedules_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_schedules_schedule_uuid', 'schedules', ['schedule_uuid'], unique=True)
    op.create_index('ix_schedules_id', 'schedules', ['id'], unique=False)
    # op.create_table('kafka_messages',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    # sa.PrimaryKeyConstraint('id', name='kafka_messages_pkey')
    # )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('task_uuid', sa.VARCHAR(), server_default=sa.text("('TASK-'::text || nextval('task_seq'::regclass))"), autoincrement=False, nullable=False),
    sa.Column('vehicle_uuid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mfo_uuid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sub_model_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('task_start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('task_end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('task_status_uuid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mfo_uuid'], ['mfo_main.mfo_uuid'], name='tasks_mfo_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['model_type'], ['model_types.model_type_uuid'], name='tasks_model_type_fkey'),
    sa.ForeignKeyConstraint(['sub_model_type'], ['sub_model_types.sub_model_type_uuid'], name='tasks_sub_model_type_fkey'),
    sa.ForeignKeyConstraint(['task_status_uuid'], ['task_status.task_status_uuid'], name='tasks_task_status_uuid_fkey'),
    sa.ForeignKeyConstraint(['vehicle_uuid'], ['vehicle_main.vehicle_uuid'], name='tasks_vehicle_uuid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tasks_task_uuid', 'tasks', ['task_uuid'], unique=True)
    op.create_index('ix_tasks_id', 'tasks', ['id'], unique=False)
    op.create_table('tasks_schedules_mapping',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('schedule_uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['schedule_uuid'], ['schedules.schedule_uuid'], name='tasks_schedules_mapping_schedule_uuid_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_uuid'], ['tasks.task_uuid'], name='tasks_schedules_mapping_task_uuid_fkey'),
    sa.PrimaryKeyConstraint('id', name='tasks_schedules_mapping_pkey')
    )
    op.create_index('ix_tasks_schedules_mapping_id', 'tasks_schedules_mapping', ['id'], unique=False)
    # ### end Alembic commands ###
    op.add_column('avaronn_porter_trip', sa.Column('schedule_uuid', sa.VARCHAR(), autoincrement=False))
    op.create_foreign_key('avaronn_porter_trip_schedule_uuid_fkey', 'avaronn_porter_trip', 'schedules', ['schedule_uuid'], ['schedule_uuid'], ondelete='CASCADE')
