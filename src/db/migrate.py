# import os
# import logging
# import importlib
# import re
# from alembic.config import Config
# from alembic import command

# # Setup logging
# logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

# def check_dependencies():
#     """Ensure required modules are installed and available."""
#     required_modules = ["geoalchemy2"]
#     for module in required_modules:
#         if importlib.util.find_spec(module) is None:
#             logging.error(f"Missing dependency: {module}. Install it using `pip install {module}`")
#             return False

#     # Explicitly check GeoAlchemy2 import
#     try:
#         from geoalchemy2 import Geometry
#         logging.info("Successfully imported GeoAlchemy2.")
#     except ImportError:
#         logging.error("GeoAlchemy2 installed but 'Geometry' is missing. Check installation.")
#         return False

#     return True

# def patch_migration_file(file_path):
#     """Patch autogenerated migration to handle duplicate columns or indexes."""
#     with open(file_path, 'r', encoding='utf-8') as f:
#         content = f.read()

#     if "from alembic import op" not in content:
#         logging.warning("Migration file seems non-standard. Skipping patch.")
#         return

#     # Ensure geoalchemy2 import is present
#     if "import geoalchemy2" not in content:
#         content = content.replace("import sqlalchemy as sa", "import sqlalchemy as sa\nimport geoalchemy2")

#     # Add connection and introspection setup
#     base_check = """
#     from sqlalchemy import text

#     conn = op.get_bind()
#     inspector = sa.inspect(conn)
#     """

#     if base_check.strip() not in content:
#         content = re.sub(r"def upgrade\(\):", "def upgrade():\n" + base_check, content)

#     # Patch column creation (safe for one column named 'location_on_map')
#     content = re.sub(
#         r"(op.add_column\('vehicle_location'.*?location_on_map.*?)\)",
#         r"""
# if 'location_on_map' not in [col['name'] for col in inspector.get_columns('vehicle_location')]:
#     \1)
# """,
#         content,
#         flags=re.DOTALL
#     )

#     # Patch index creation (safe for one index named 'idx_vehicle_location_location_on_map')
#     content = re.sub(
#         r"(op.create_index\(\s*['\"]idx_vehicle_location_location_on_map['\"].*?\))",
#         r"""
# if not conn.execute(text("SELECT 1 FROM pg_indexes WHERE tablename = 'vehicle_location' AND indexname = 'idx_vehicle_location_location_on_map'")).scalar():
#     \1
# """,
#         content,
#         flags=re.DOTALL
#     )

#     with open(file_path, 'w', encoding='utf-8') as f:
#         f.write(content)

#     logging.info("Patched migration file for safe upgrades.")

# def run_alembic_migrations():
#     """Automatically generates migrations when SQLAlchemy models change."""
#     if not check_dependencies():
#         logging.error("Required dependencies are missing. Aborting migration.")
#         return

#     try:
#         alembic_path = os.path.join(os.path.dirname(__file__), '../alembic.ini')
#         if not os.path.exists(alembic_path):
#             logging.error(f"Alembic config file not found at {alembic_path}")
#             return

#         alembic_cfg = Config(alembic_path)

#         # Auto-generate migration
#         logging.info("Auto-generating migration file...")
#         command.revision(alembic_cfg, message="Auto migration", autogenerate=True)

#         # Locate latest migration file
#         versions_dir = os.path.join(os.path.dirname(__file__), '../alembic/versions')
#         migration_files = [os.path.join(versions_dir, f) for f in os.listdir(versions_dir) if f.endswith(".py")]
#         latest_migration = max(migration_files, key=os.path.getctime)

#         # Patch migration file
#         patch_migration_file(latest_migration)

#         # Apply the migration
#         logging.info("Applying migration...")
#         command.upgrade(alembic_cfg, "head")

#     except Exception as e:
#         logging.error(f"Migration process failed: {e}")

# if __name__ == "__main__":
#     run_alembic_migrations()